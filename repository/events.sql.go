// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addEvent = `-- name: AddEvent :one
INSERT INTO events (
  created_by,
  title,
  description,
  status,
  total_amount,
  date_event,
  can_edit
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, title, description, status, total_amount, date_event, created_by, can_edit, created_at, updated_at, is_active
`

type AddEventParams struct {
	CreatedBy   uuid.UUID      `json:"created_by"`
	Title       sql.NullString `json:"title"`
	Description sql.NullString `json:"description"`
	Status      string         `json:"status"`
	TotalAmount int32          `json:"total_amount"`
	DateEvent   sql.NullTime   `json:"date_event"`
	CanEdit     bool           `json:"can_edit"`
}

func (q *Queries) AddEvent(ctx context.Context, arg AddEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, addEvent,
		arg.CreatedBy,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.TotalAmount,
		arg.DateEvent,
		arg.CanEdit,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.TotalAmount,
		&i.DateEvent,
		&i.CreatedBy,
		&i.CanEdit,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :one
UPDATE events
SET 
  is_active = $2
WHERE id = $1 AND can_edit = true
RETURNING id, title, description, status, total_amount, date_event, created_by, can_edit, created_at, updated_at, is_active
`

type DeleteEventParams struct {
	ID       uuid.UUID `json:"id"`
	IsActive bool      `json:"is_active"`
}

func (q *Queries) DeleteEvent(ctx context.Context, arg DeleteEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, deleteEvent, arg.ID, arg.IsActive)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.TotalAmount,
		&i.DateEvent,
		&i.CreatedBy,
		&i.CanEdit,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const getEvent = `-- name: GetEvent :one
SELECT id, title, description, status, total_amount, date_event, created_by, can_edit, created_at, updated_at, is_active FROM events
WHERE id = $1 AND is_active = true LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.TotalAmount,
		&i.DateEvent,
		&i.CreatedBy,
		&i.CanEdit,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}

const listEventByUser = `-- name: ListEventByUser :many
SELECT id, title, description, status, total_amount, date_event, created_by, can_edit, created_at, updated_at, is_active FROM events
WHERE created_by = $1 AND is_active = true
`

func (q *Queries) ListEventByUser(ctx context.Context, createdBy uuid.UUID) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEventByUser, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.TotalAmount,
			&i.DateEvent,
			&i.CreatedBy,
			&i.CanEdit,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET 
  title = $2,
  description = $3,
  status = $4,
  total_amount = $5,
  date_event = $6
WHERE id = $1 AND can_edit = true AND is_active = true
RETURNING id, title, description, status, total_amount, date_event, created_by, can_edit, created_at, updated_at, is_active
`

type UpdateEventParams struct {
	ID          uuid.UUID      `json:"id"`
	Title       sql.NullString `json:"title"`
	Description sql.NullString `json:"description"`
	Status      string         `json:"status"`
	TotalAmount int32          `json:"total_amount"`
	DateEvent   sql.NullTime   `json:"date_event"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.TotalAmount,
		arg.DateEvent,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.TotalAmount,
		&i.DateEvent,
		&i.CreatedBy,
		&i.CanEdit,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}
