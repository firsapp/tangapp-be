// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: event_member_details.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addMemberDetail = `-- name: AddMemberDetail :one
INSERT INTO event_member_details
(event_id, user_id, bill, paid, compensation, notes, done)
VALUES(
  $1, $2, $3, $4, $5, $6 ,$7
)
RETURNING id, event_id, user_id, bill, paid, compensation, notes, done
`

type AddMemberDetailParams struct {
	EventID      uuid.UUID      `json:"event_id"`
	UserID       uuid.UUID      `json:"user_id"`
	Bill         sql.NullInt32  `json:"bill"`
	Paid         sql.NullInt32  `json:"paid"`
	Compensation sql.NullInt32  `json:"compensation"`
	Notes        sql.NullString `json:"notes"`
	Done         bool           `json:"done"`
}

func (q *Queries) AddMemberDetail(ctx context.Context, arg AddMemberDetailParams) (EventMemberDetail, error) {
	row := q.db.QueryRow(ctx, addMemberDetail,
		arg.EventID,
		arg.UserID,
		arg.Bill,
		arg.Paid,
		arg.Compensation,
		arg.Notes,
		arg.Done,
	)
	var i EventMemberDetail
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.UserID,
		&i.Bill,
		&i.Paid,
		&i.Compensation,
		&i.Notes,
		&i.Done,
	)
	return i, err
}

const getMemberDetail = `-- name: GetMemberDetail :one
SELECT 
  id, 
  event_id, 
  user_id, 
  bill, 
  paid, 
  compensation, 
  notes, 
  done
FROM event_member_details
WHERE id=$1
`

func (q *Queries) GetMemberDetail(ctx context.Context, id uuid.UUID) (EventMemberDetail, error) {
	row := q.db.QueryRow(ctx, getMemberDetail, id)
	var i EventMemberDetail
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.UserID,
		&i.Bill,
		&i.Paid,
		&i.Compensation,
		&i.Notes,
		&i.Done,
	)
	return i, err
}

const listMemberDetail = `-- name: ListMemberDetail :many
SELECT 
  id, 
  event_id, 
  user_id, 
  bill, 
  paid, 
  compensation, 
  notes, 
  done
FROM event_member_details
WHERE event_id=$1
`

func (q *Queries) ListMemberDetail(ctx context.Context, eventID uuid.UUID) ([]EventMemberDetail, error) {
	rows, err := q.db.Query(ctx, listMemberDetail, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventMemberDetail{}
	for rows.Next() {
		var i EventMemberDetail
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.UserID,
			&i.Bill,
			&i.Paid,
			&i.Compensation,
			&i.Notes,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMemberDetail = `-- name: UpdateMemberDetail :one
UPDATE event_member_details 
SET 
  bill = $2, 
  paid = $3, 
  compensation =$4, 
  notes=$5, 
  done=$6
WHERE id = $1
RETURNING id, event_id, user_id, bill, paid, compensation, notes, done
`

type UpdateMemberDetailParams struct {
	ID           uuid.UUID      `json:"id"`
	Bill         sql.NullInt32  `json:"bill"`
	Paid         sql.NullInt32  `json:"paid"`
	Compensation sql.NullInt32  `json:"compensation"`
	Notes        sql.NullString `json:"notes"`
	Done         bool           `json:"done"`
}

func (q *Queries) UpdateMemberDetail(ctx context.Context, arg UpdateMemberDetailParams) (EventMemberDetail, error) {
	row := q.db.QueryRow(ctx, updateMemberDetail,
		arg.ID,
		arg.Bill,
		arg.Paid,
		arg.Compensation,
		arg.Notes,
		arg.Done,
	)
	var i EventMemberDetail
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.UserID,
		&i.Bill,
		&i.Paid,
		&i.Compensation,
		&i.Notes,
		&i.Done,
	)
	return i, err
}
