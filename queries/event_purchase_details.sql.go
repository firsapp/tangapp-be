// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event_purchase_details.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addPurchaseDetail = `-- name: AddPurchaseDetail :one
INSERT INTO event_purchase_details
( event_id, name, qty, each_price, total_price)
VALUES($1, $2, $3, $4, $5)
RETURNING id, event_id, name, qty, each_price, total_price, created_at, updated_at
`

type AddPurchaseDetailParams struct {
	EventID    uuid.UUID `json:"event_id"`
	Name       string    `json:"name"`
	Qty        int32     `json:"qty"`
	EachPrice  int32     `json:"each_price"`
	TotalPrice int32     `json:"total_price"`
}

func (q *Queries) AddPurchaseDetail(ctx context.Context, arg AddPurchaseDetailParams) (EventPurchaseDetail, error) {
	row := q.db.QueryRow(ctx, addPurchaseDetail,
		arg.EventID,
		arg.Name,
		arg.Qty,
		arg.EachPrice,
		arg.TotalPrice,
	)
	var i EventPurchaseDetail
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Name,
		&i.Qty,
		&i.EachPrice,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPurchaseDetailByEventID = `-- name: GetPurchaseDetailByEventID :many
SELECT id, event_id, name, qty, each_price, total_price, updated_at
FROM event_purchase_details
WHERE event_id = $1
`

type GetPurchaseDetailByEventIDRow struct {
	ID         uuid.UUID    `json:"id"`
	EventID    uuid.UUID    `json:"event_id"`
	Name       string       `json:"name"`
	Qty        int32        `json:"qty"`
	EachPrice  int32        `json:"each_price"`
	TotalPrice int32        `json:"total_price"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
}

func (q *Queries) GetPurchaseDetailByEventID(ctx context.Context, eventID uuid.UUID) ([]GetPurchaseDetailByEventIDRow, error) {
	rows, err := q.db.Query(ctx, getPurchaseDetailByEventID, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPurchaseDetailByEventIDRow{}
	for rows.Next() {
		var i GetPurchaseDetailByEventIDRow
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Name,
			&i.Qty,
			&i.EachPrice,
			&i.TotalPrice,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPurchaseDetailByID = `-- name: GetPurchaseDetailByID :one
SELECT id, event_id, name, qty, each_price, total_price, updated_at
FROM event_purchase_details
WHERE id = $1
`

type GetPurchaseDetailByIDRow struct {
	ID         uuid.UUID    `json:"id"`
	EventID    uuid.UUID    `json:"event_id"`
	Name       string       `json:"name"`
	Qty        int32        `json:"qty"`
	EachPrice  int32        `json:"each_price"`
	TotalPrice int32        `json:"total_price"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
}

func (q *Queries) GetPurchaseDetailByID(ctx context.Context, id uuid.UUID) (GetPurchaseDetailByIDRow, error) {
	row := q.db.QueryRow(ctx, getPurchaseDetailByID, id)
	var i GetPurchaseDetailByIDRow
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Name,
		&i.Qty,
		&i.EachPrice,
		&i.TotalPrice,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePurchaseDetail = `-- name: UpdatePurchaseDetail :one
UPDATE event_purchase_details
SET
  name = $2,
  qty = $3,
  each_price = $4,
  total_price = $5,
  updated_at = $6
WHERE id = $1
RETURNING id, event_id, name, qty, each_price, total_price, created_at, updated_at
`

type UpdatePurchaseDetailParams struct {
	ID         uuid.UUID    `json:"id"`
	Name       string       `json:"name"`
	Qty        int32        `json:"qty"`
	EachPrice  int32        `json:"each_price"`
	TotalPrice int32        `json:"total_price"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
}

func (q *Queries) UpdatePurchaseDetail(ctx context.Context, arg UpdatePurchaseDetailParams) (EventPurchaseDetail, error) {
	row := q.db.QueryRow(ctx, updatePurchaseDetail,
		arg.ID,
		arg.Name,
		arg.Qty,
		arg.EachPrice,
		arg.TotalPrice,
		arg.UpdatedAt,
	)
	var i EventPurchaseDetail
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Name,
		&i.Qty,
		&i.EachPrice,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
